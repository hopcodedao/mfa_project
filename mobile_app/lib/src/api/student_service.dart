import 'dart:io';
import 'package:http/http.dart' as http;
import 'dart:convert';
import 'package:flutter_secure_storage/flutter_secure_storage.dart';
import 'api_client.dart';
import 'package:http_parser/http_parser.dart';
import '../services/cache_service.dart';

class StudentService {
  final _storage = const FlutterSecureStorage();

  Future<List<dynamic>> getMySchedules(String filter) async {
    print('üîç [DEBUG] ƒêang t·∫£i l·ªãch h·ªçc v·ªõi filter: $filter');  
    print('üìÖ [DEBUG] Current DateTime: ${DateTime.now()}');  
    print('üìÖ [DEBUG] Current weekday: ${DateTime.now().weekday}'); // Monday=1  
    print('üìÖ [DEBUG] Current isoWeekday: ${DateTime.now().weekday}');

    try {
      final token = await _storage.read(key: 'accessToken');
      if (token == null) {
        throw Exception('Kh√¥ng t√¨m th·∫•y token x√°c th·ª±c');
      }

      final url = Uri.parse('${BASE_URL}user/my-schedules/?filter=$filter');
      print('üì° G·ªçi API: $url');

      final response = await http
          .get(
            url,
            headers: {
              'Authorization': 'Bearer $token',
              'Content-Type': 'application/json',
            },
          )
          .timeout(
            const Duration(seconds: 30),
            onTimeout: () {
              throw Exception('K·∫øt n·ªëi qu√° ch·∫≠m, vui l√≤ng th·ª≠ l·∫°i');
            },
          );

      print('üìä Response status: ${response.statusCode}');
      print('üìä Response body: ${response.body}');

      if (response.statusCode == 200) {
        final data = json.decode(utf8.decode(response.bodyBytes));
        print('‚úÖ T·∫£i th√†nh c√¥ng ${data.length} l·ªãch h·ªçc');

        // Cache data for offline use
        await CacheService.cacheSchedules(data);
        return data;
      } else if (response.statusCode == 401) {
        throw Exception('Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n');
      } else if (response.statusCode == 404) {
        print('‚ÑπÔ∏è Kh√¥ng c√≥ l·ªãch h·ªçc n√†o');
        return [];
      } else {
        print('‚ùå API error: ${response.statusCode} - ${response.body}');
        throw Exception('L·ªói server: ${response.statusCode}');
      }
    } catch (e) {
      print('‚ùå Exception: $e');

      // N·∫øu c√≥ l·ªói, th·ª≠ load t·ª´ cache
      print('üîÑ ƒêang th·ª≠ t·∫£i t·ª´ cache...');
      final cachedData = await CacheService.getCachedSchedules();
      if (cachedData != null) {
        print('‚úÖ T·∫£i th√†nh c√¥ng t·ª´ cache: ${cachedData.length} l·ªãch h·ªçc');
        return cachedData;
      }

      // N·∫øu kh√¥ng c√≥ cache, n√©m l·ªói chi ti·∫øt
      if (e is SocketException) {
        throw Exception('Kh√¥ng c√≥ k·∫øt n·ªëi internet');
      } else if (e.toString().contains('timeout')) {
        throw Exception('K·∫øt n·ªëi qu√° ch·∫≠m, vui l√≤ng th·ª≠ l·∫°i');
      } else {
        throw Exception('Kh√¥ng th·ªÉ t·∫£i l·ªãch h·ªçc: ${e.toString()}');
      }
    }
  }

  Future<http.StreamedResponse> registerFace(File imageFile) async {
    final token = await _storage.read(key: 'accessToken');
    final url = Uri.parse('${BASE_URL}user/register-face/');

    final request = http.MultipartRequest('POST', url);
    final filename = imageFile.path.split('/').last;

    request.files.add(
      http.MultipartFile(
        'face_image',
        imageFile.readAsBytes().asStream(),
        imageFile.lengthSync(),
        filename: filename,
        contentType: MediaType('image', 'jpeg'),
      ),
    );

    request.headers['Authorization'] = 'Bearer $token';
    return request.send();
  }

  // Trong class StudentService
  Future<http.StreamedResponse> checkIn({
    required String qrToken,
    required File livenessVideo,
    required double latitude,
    required double longitude,
    String? wifiSsid, // [TH√äM] Tham s·ªë m·ªõi, c√≥ th·ªÉ null
  }) async {
    final token = await _storage.read(key: 'accessToken');
    final url = Uri.parse('${BASE_URL}attendance/check-in/');
    final request = http.MultipartRequest('POST', url);

    request.headers['Authorization'] = 'Bearer $token';

    // Th√™m c√°c tr∆∞·ªùng d·ªØ li·ªáu
    request.fields['qr_token'] = qrToken;
    request.fields['latitude'] = latitude.toString();
    request.fields['longitude'] = longitude.toString();
    // [TH√äM] G·ª≠i SSID l√™n server, n·∫øu l√† null th√¨ g·ª≠i chu·ªói r·ªóng
    request.fields['wifi_ssid'] = wifiSsid ?? '';

    // Th√™m file video
    request.files.add(
      http.MultipartFile(
        'liveness_video',
        livenessVideo.readAsBytes().asStream(),
        livenessVideo.lengthSync(),
        filename: livenessVideo.path.split('/').last,
        contentType: MediaType('video', 'mp4'),
      ),
    );

    return request.send();
  }

  // L·∫•y l·ªãch s·ª≠ ƒëi·ªÉm danh c·ªßa sinh vi√™n cho m·ªôt l·ªõp
  Future<List<dynamic>> getMyAttendanceHistory(int classId) async {
    final token = await _storage.read(key: 'accessToken');
    final url = Uri.parse('${BASE_URL}classes/$classId/my-attendance/');
    final response = await http.get(
      url,
      headers: {'Authorization': 'Bearer $token'},
    );
    if (response.statusCode == 200) {
      return json.decode(utf8.decode(response.bodyBytes));
    } else {
      throw Exception('Kh√¥ng th·ªÉ t·∫£i l·ªãch s·ª≠ ƒëi·ªÉm danh.');
    }
  }

  // N·ªôp ƒë∆°n xin ph√©p
  Future<http.StreamedResponse> submitAbsenceRequest({
    required int scheduleId,
    required String reason,
    required File proofImage,
  }) async {
    final token = await _storage.read(key: 'accessToken');
    final url = Uri.parse('${BASE_URL}absence-requests/');
    final request = http.MultipartRequest('POST', url);

    request.headers['Authorization'] = 'Bearer $token';
    request.fields['schedule'] = scheduleId.toString();
    request.fields['reason'] = reason;
    request.files.add(
      await http.MultipartFile.fromPath('proof', proofImage.path),
    );

    return request.send();
  }

  Future<List<dynamic>> getEnrolledClasses() async {
    print('üîç ƒêang t·∫£i danh s√°ch l·ªõp h·ªçc');

    try {
      final token = await _storage.read(key: 'accessToken');
      if (token == null) {
        throw Exception('Kh√¥ng t√¨m th·∫•y token x√°c th·ª±c');
      }

      final url = Uri.parse('${BASE_URL}user/my-enrollments/');
      print('üì° G·ªçi API: $url');

      final response = await http
          .get(
            url,
            headers: {
              'Authorization': 'Bearer $token',
              'Content-Type': 'application/json',
            },
          )
          .timeout(
            const Duration(seconds: 30),
            onTimeout: () {
              throw Exception('K·∫øt n·ªëi qu√° ch·∫≠m, vui l√≤ng th·ª≠ l·∫°i');
            },
          );

      print('üìä Response status: ${response.statusCode}');

      if (response.statusCode == 200) {
        final data = json.decode(utf8.decode(response.bodyBytes));
        print('‚úÖ T·∫£i th√†nh c√¥ng ${data.length} l·ªõp h·ªçc');

        // Cache data for offline use
        await CacheService.cacheClasses(data);
        return data;
      } else if (response.statusCode == 401) {
        throw Exception('Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n');
      } else if (response.statusCode == 404) {
        print('‚ÑπÔ∏è Kh√¥ng c√≥ l·ªõp h·ªçc n√†o');
        return [];
      } else {
        print('‚ùå API error: ${response.statusCode} - ${response.body}');
        throw Exception('L·ªói server: ${response.statusCode}');
      }
    } catch (e) {
      print('‚ùå Exception: $e');

      // N·∫øu c√≥ l·ªói, th·ª≠ load t·ª´ cache
      print('üîÑ ƒêang th·ª≠ t·∫£i t·ª´ cache...');
      final cachedData = await CacheService.getCachedClasses();
      if (cachedData != null) {
        print('‚úÖ T·∫£i th√†nh c√¥ng t·ª´ cache: ${cachedData.length} l·ªõp h·ªçc');
        return cachedData;
      }

      // N·∫øu kh√¥ng c√≥ cache, n√©m l·ªói chi ti·∫øt
      if (e is SocketException) {
        throw Exception('Kh√¥ng c√≥ k·∫øt n·ªëi internet');
      } else if (e.toString().contains('timeout')) {
        throw Exception('K·∫øt n·ªëi qu√° ch·∫≠m, vui l√≤ng th·ª≠ l·∫°i');
      } else {
        throw Exception('Kh√¥ng th·ªÉ t·∫£i danh s√°ch l·ªõp h·ªçc: ${e.toString()}');
      }
    }
  }

  Future<http.Response> changePassword({
    required String oldPassword,
    required String newPassword,
  }) async {
    final token = await _storage.read(key: 'accessToken');
    final url = Uri.parse('${BASE_URL}auth/change-password/');
    final response = await http.post(
      url,
      headers: {
        'Content-Type': 'application/json',
        'Authorization': 'Bearer $token',
      },
      body: json.encode({
        'old_password': oldPassword,
        'new_password': newPassword,
      }),
    );
    return response;
  }

  Future<Map<String, dynamic>> getAttendanceStats() async {
    final token = await _storage.read(key: 'accessToken');
    final url = Uri.parse('${BASE_URL}user/attendance-stats/');
    final response = await http.get(
      url,
      headers: {'Authorization': 'Bearer $token'},
    );
    if (response.statusCode == 200) {
      return json.decode(utf8.decode(response.bodyBytes));
    } else {
      throw Exception('Kh√¥ng th·ªÉ t·∫£i th·ªëng k√™ ƒëi·ªÉm danh');
    }
  }

  Future<List<dynamic>> getUpcomingSchedules() async {
    final token = await _storage.read(key: 'accessToken');
    final url = Uri.parse('${BASE_URL}user/upcoming-schedules/');
    final response = await http.get(
      url,
      headers: {'Authorization': 'Bearer $token'},
    );
    if (response.statusCode == 200) {
      return json.decode(utf8.decode(response.bodyBytes));
    } else {
      throw Exception('Kh√¥ng th·ªÉ t·∫£i l·ªãch s·∫Øp t·ªõi');
    }
  }

  Future<http.Response> updateProfile(Map<String, dynamic> profileData) async {
    final token = await _storage.read(key: 'accessToken');
    final url = Uri.parse('${BASE_URL}user/profile/');
    return await http.put(
      url,
      headers: {
        'Content-Type': 'application/json',
        'Authorization': 'Bearer $token',
      },
      body: json.encode(profileData),
    );
  }
}
